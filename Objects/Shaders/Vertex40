    mat4 world;
    mat4 view;
    mat4 project;
    vec3 light_color;
} objectuniform;

// out vec4 fragment_normals;
layout(location = 0) out vec2 fragment_texcoord;
layout(location = 1) out vec3 fragment_light_color;
// out vec3 fragment_world;

invariant gl_Position;

vec4 temp_vertices_vec4;
// vec4 temp_normals_vec4;

void transformVec(int b)
{
    mat4 skinning_mat4 = bindposes[b];
    temp_vertices_vec4 *= skinning_mat4;
    // temp_normals_vec4 *= skinning_mat4;

    skinning_mat4 *= objectuniform.animation_transform[b];
    skinning_mat4 = inverse(skinning_mat4);
    temp_vertices_vec4 *= skinning_mat4;
    // temp_normals_vec4 *= skinning_mat4;
}

void main()
{
    vec4 vertices_vec4 = vec4(0, 0, 0, 0);
    // vec4 normals_vec4 = vec4(0, 0, 0, 0);